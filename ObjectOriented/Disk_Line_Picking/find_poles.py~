import numpy as np
from matplotlib import pyplot as plt
from mpl_toolkits import mplot3d

import scipy.integrate as integrate

def real_integrand(x,s): return np.real(x**(s-1)*np.exp(-x**2-x))
def imag_integrand(x,s): return np.imag(x**(s-1)*np.exp(-x**2-x))
def special_int(s):  
  r = integrate.quad(real_integrand, 0, np.inf, args=(s))
  i = integrate.quad(imag_integrand, 0, np.inf, args=(s))
  #return (r[0]+ 1j*i[0],r[1:],i[1:])  
  return r[0]+ 1j*i[0], r[1], i[1]

vec_int = np.vectorize(special_int)

keyword = "Disk_Line_Picking"

size = 1000000

## Generate uniformly smapled points on the unit disk
random_r1 = np.random.uniform(0,1,size)
random_theta1 = np.random.uniform(0,2*np.pi,size)
random_r2 = np.random.uniform(0,1,size)
random_theta2 = np.random.uniform(0,2*np.pi,size)

## Convert to cartesian coordinates
random_x1 = np.sqrt(random_r1)*np.cos(random_theta1)
random_y1 = np.sqrt(random_r1)*np.sin(random_theta1)
random_x2 = np.sqrt(random_r2)*np.cos(random_theta2)
random_y2 = np.sqrt(random_r2)*np.sin(random_theta2)

## Get the lengths of random lines
lengths = np.sqrt( (random_x1 - random_x2)**2 + (random_y1 - random_y2)**2  )

## Show a histogram
plt.hist(lengths, bins = 100, density = True)

#from scipy.stats import chi
#xx = np.linspace(0,5,100)
#yy = chi.pdf(xx, 10)
#plt.plot(xx,yy,'-k')

plt.show()

#exit()



## Generate reail and imaginary part complex moments
#s_size = 100
#s1 = np.random.uniform(low = 1, high = 5, size = s_size)
#s2 = np.random.uniform(low = -1*np.pi, high = 1*np.pi, size = s_size)
#s = np.expand_dims(s1 + s2*1j, axis = 0)
#print(s)

#s = np.array([1+0j,2+0j,3+0j,4+0j, 1.5+1j, 1.5-1j, 2.5+1.5j, 2.5-1.5j])

#q, qre, qie = vec_int(s)

#s = np.linspace(-5,5,100) + 0.1j
s = np.linspace(-5,5,200)

## For each moment, get the expectation of s-1 for Mellin Transform
q = np.mean(np.power(np.expand_dims(lengths,1),s-1),axis=0)

from scipy.special import gamma

act = 2*gamma((s-1) + 3)/((s-1)+2)/gamma(2+(s-1)/2)/gamma(3+(s-1)/2)

plt.plot(np.real(s),np.real(np.log(q)), '-r', label = "real numeric")
plt.plot(np.real(s),np.imag(np.log(q)), '-b', label = "imag numeric")
plt.plot(np.real(s),np.real(np.log(act)), ':r', label = "real actual")
plt.plot(np.real(s),np.imag(np.log(act)), ':b', label = "imag actual")
plt.legend()
plt.show()
exit()


if(True):
  ax = plt.axes(projection='3d')
  # Data for three-dimensional scattered points
  ax.scatter3D(np.real(s), np.imag(s), np.real(q), c=np.real(q), cmap='Reds');
  ax.scatter3D(np.real(s), np.imag(s), np.imag(q), c=np.imag(q), cmap='Greens');
  ax.set_xlabel('Re(s)')
  ax.set_ylabel('Im(s)')
  ax.set_zlabel('$E[x^{s-1}]$')
  plt.show()
  
  ax = plt.axes(projection='3d')
  # Data for three-dimensional scattered points
  ax.scatter3D(np.real(s), np.imag(s), np.real(np.log(q)), c=np.real(np.log(q)), cmap='Reds');
  ax.scatter3D(np.real(s), np.imag(s), np.imag(np.log(q)), c=np.imag(np.log(q)), cmap='Greens');
  ax.set_xlabel('Re(s)')
  ax.set_ylabel('Im(s)')
  ax.set_zlabel('$\log E[x^{s-1}]$')
  plt.show()


## Save out exact learning data (complex moments)
np.save("s_values_{}".format(keyword),s)
np.save("moments_{}".format(keyword),q)
np.save("logmoments_{}".format(keyword),np.log(q))
#np.save("real_error_{}".format(keyword),qre)
#np.save("imag_error_{}".format(keyword),qie)
